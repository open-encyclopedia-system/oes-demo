<?php

namespace OES\Option;


if (!defined('ABSPATH')) exit; // Exit if accessed directly

if (!class_exists('Option')) :

    /**
     * Class Option
     *
     * Class constructs and registers settings for one option group.
     */
    class Option
    {

        /** @var array Array containing the settings data for one option group */
        var $settings = [];

        /** @var null String containing the option group identifier. */
        var $optionGroup = null;

        /** @var null String containing the name of the option group identifier. */
        var $optionName = null;


        /**
         * Option constructor.
         */
        function __construct()
        {
            //Do nothing and that's absolutely right.
        }


        /**
         * Register settings sections and fields.
         *
         * @param array $settings An array containing sections and fields.
         */
        function add_settings($settings = [])
        {

            /* check if array */
            if (!is_array($settings)) {
                add_settings_error('general-error',
                    'setting-no-array',
                    'The given settings are not an array.',
                    'warning');
            }

            /* initialize settings */
            $optionGroupSettings = new Option();

            /* loop through sections */
            foreach ($settings as $sectionID => $section) {

                /* add section */
                $title = isset($section['title']) ? $section['title'] : '';
                $callback = isset($section['callback']) ? $section['callback'] : '';
                $optionGroup = isset($section['optionGroup']) ? $section['optionGroup'] : null;
                $optionName = isset($section['optionName']) ? $section['optionName'] : null;
                $fields = isset($section['fields']) ? $section['fields'] : [];

                $sectionID = $optionGroupSettings->section($sectionID, $title, $callback, $optionGroup, $optionName);

                /* add fields */

                /* check if array */
                if (!is_array($fields)) {
                    add_settings_error('general-error',
                        'fields-no-array',
                        'The given fields settings are not an array for section "' . $sectionID . '".',
                        'warning');
                } else {

                    /* loop through fields */
                    foreach ($fields as $fieldID => $field) {

                        $type = isset($field['type']) ? $field['type'] : '';
                        $title = isset($field['title']) ? $field['title'] : '';
                        $description = isset($field['description']) ? $field['description'] : '';
                        $options = isset($field['options']) ? $field['options'] : [];
                        $callback = isset($field['callback']) ? $field['callback'] : null;

                        $optionGroupSettings->field($sectionID, $fieldID, $type, $title, $description, $options, $callback);
                    }
                }
            }

            /* register */
            $optionGroupSettings->register_sections_and_fields();
        }


        /**
         * Construct a new section inside the option group. If the option group does not yet exist, it generates the option group identifier and name.
         *
         * @param string $sectionID String containing the section ID.
         * @param string $title Optional string containing the title for the section.
         * @param string $callback Optional string containing a callable function.
         * @param string $optionGroup Optional string containing option group identifier. If empty this is equal to the option group identifier generated by the section ID.
         * @param string $optionName Optional string containing option group name. If empty this is equal to $optionGroup
         * @param array $fields Optional array containing fields for the option group section.
         * @return string|boolean Return section ID. Return false if section already exists.
         */
        function section($sectionID, $title = '', $callback = '', $optionGroup = null, $optionName = null, $fields = [])
        {
            $sectionID = $this->validate_sectionID($sectionID);

            /* skip if section already exists */
            if (!$sectionID) return false;

            $args['title'] = $title;
            $args['callback'] = $callback;
            $args['fields'] = $fields;
            $args['page'] = $this->set_option_group($optionGroup, $sectionID);
            $args['optionName'] = $this->set_option_name($optionName);

            return $this->set_section_parameters($sectionID, $args);
        }


        /**
         * Register option group and containing sections and fields.
         */
        function register_sections_and_fields()
        {
            /* loop through settings by section */
            foreach ($this->settings as $sectionID => $section) {

                /* register section */
                add_settings_section(
                    $sectionID,
                    $section['title'],
                    $section['callback'],
                    $section['page']
                );

                /* register fields */
                foreach ($section['fields'] as $fieldID => $field) {

                    add_settings_field(
                        $fieldID,
                        $field['title'],
                        $field['callback'],
                        $field['page'],
                        $sectionID,
                        ['type' => $field['type'],
                            'id' => $fieldID,
                            'optionGroup' => $section['page'],
                            'title' => $field['title'],
                            'description' => $field['description'],
                            'options' => $field['options']
                        ]
                    );
                }

                register_setting($section['page'], $section['optionName']);
            }
        }


        /**
         * Display option field depending on the field type.
         *
         * @param array $args Array containing field parameters.
         */
        function html($args)
        {
            /* differentiate between input types */
            switch ($args['type']) {

                case 'text' :
                    $this->html_text($args);
                    break;

                case 'textarea' :
                    $this->html_textarea($args);
                    break;

                case 'radio' :
                    $this->html_radio($args);
                    break;

                case 'checkbox' :
                    $this->html_checkbox($args);
                    break;

                case 'password' :
                    $this->html_password($args);
                    break;

                case 'dropdown' :
                    $this->html_dropdown($args);
                    break;

                case 'display_only_text' :
                    $this->html_display_only_text($args);
                    break;

                default:
                    add_settings_error($this->optionGroup,
                        'invalid-option-group',
                        sprintf(__('No recognized option type "%1$s" for option group "%2$s" with id "%3$s" and title "%4$s".', 'oes'),
                            $args['type'],
                            $args['optionGroup'],
                            $args['id'],
                            $args['title']
                        ),
                        'warning'
                    );
            }
        }


        /**
         * Construct a new field inside a section of the option group.
         *
         * @param string $sectionID String containing the section ID.
         * @param string $fieldID String containing the field ID.
         * @param string $type Optional string containing the field type.
         * @param string $title Optional string containing the field title.
         * @param string $description Optional string containing the description.
         * @param array $options Optional array containing the options for fields of type 'radio' or 'dropdown'.
         * @param object $callback Optional object containing a callable function.
         * @return string|boolean Return fields ID. Return false if field can not be created.
         */
        function field($sectionID, $fieldID, $type, $title = '', $description = '', $options = [], $callback = null)
        {
            /* skip if option group does not exists */
            if (!$this->get_option_group()) return false;

            /* skip if sectionID is not a string */
            if (!is_string($sectionID)) {
                add_settings_error($this->optionGroup,
                    'section-id-not-a-string',
                    'The given section ID is not a string. Skip field.',
                    'warning');
                return false;
            }

            /* skip if fieldID is not a string */
            if (!is_string($fieldID)) {
                add_settings_error($this->optionGroup,
                    'field-id-not-a-string',
                    'The given field ID is not a string. Skip field.',
                    'warning');
                return false;
            }

            /* skip if section ID does not exist */
            if (!isset($this->settings[$sectionID])) {
                add_settings_error($this->optionGroup,
                    'missing-section-id',
                    'Section ID "' . esc_html($sectionID) . '" does not exist for field "' . esc_html($fieldID) . '".',
                    'warning');
                return false;
            }

            /* skip if page for section ID is not set */
            if (!isset($this->settings[$sectionID]['page'])) {
                add_settings_error($this->optionGroup,
                    'section-page-not-set',
                    'The page for section ID "' . esc_html($sectionID) . '" is not set. Skip field "' . esc_html($fieldID) . '".',
                    'warning');
                return false;
            }

            $args['type'] = $type;
            $args['title'] = $title;
            $args['description'] = $description;
            $args['options'] = $options;
            $args['callback'] = isset($callback) ? $callback : [$this, 'html'];

            /* inherit page from section */
            $args['page'] = $this->settings[$sectionID]['page'];

            return $this->set_field_parameters($sectionID, $fieldID, $args);
        }


        /**
         * Set option group class variable.
         *
         * @param string $optionGroup String containing the option group ID.
         * @param string $sectionID String containing the section ID. If the option group ID is not given, make the section ID the option group ID.
         * @return string|null Returning the option group ID class variable.
         */
        private function set_option_group($optionGroup, $sectionID)
        {
            /* check if option group already set for these settings */
            if ($this->optionGroup) {
                $optionGroup = $this->optionGroup;
            } else {
                if (!isset($optionGroup)) {
                    if (isset($sectionID)) {
                        $optionGroup = $sectionID;
                    } else {
                        $optionGroup = 'missing_option_group_name';
                        add_settings_error($optionGroup,
                            'missing-option-group',
                            'Option group and section ID do not exist. Use default option group "' . $optionGroup . '".',
                            'warning');
                    }
                }
                $this->optionGroup = $optionGroup;
            }
            return $optionGroup;
        }


        /**
         * Get option group ID class variable.
         *
         * @return false|null Returns option group class variable.
         */
        private function get_option_group()
        {
            if (empty($this->optionGroup)) return false;
            else return $this->optionGroup;
        }


        /**
         * Set option group name class variable.
         *
         * @param String $optionName String containing the option group name.
         * @return string|null Returns the option group name class variable.
         */
        private function set_option_name($optionName)
        {
            /* check if option group already set for these settings */
            if ($this->optionName) {
                $optionName = $this->optionName;
            } else {
                if (!isset($optionName)) {
                    if ($this->optionGroup) {
                        $optionName = $this->optionGroup;
                    } else {
                        $optionName = 'missing_option_group_name';
                        add_settings_error($optionName,
                            'missing-option-group-name',
                            'Option group name and option group do not exist. Use default option group "' . $optionName . '".',
                            'warning');
                    }
                }
                $this->optionName = $optionName;
            }
            return $optionName;
        }


        /**
         * Validate section ID. Returns false if section ID is not a string or does already exists inside the option group.
         *
         * @param string $sectionID String containing the section ID.
         * @return string|boolean Return section ID. Return false if section already exists or not a string.
         */
        private function validate_sectionID($sectionID)
        {

            if (isset($this->settings[$sectionID])) {
                add_settings_error($this->optionGroup,
                    'new-section-id',
                    'Section "' . $sectionID . '" already exists. Skip section creation.',
                    'warning');
                return false;
            }

            return $sectionID;
        }


        /**
         * Set section parameters.
         *
         * @param string $sectionID String containing section ID.
         * @param array $args Array containing section parameters.
         * @return string String returning the sanitized section ID.
         */
        private function set_section_parameters($sectionID, $args)
        {

            /* sanitize */
            $args = $this->sanitize_section_parameters($args);

            /* set section parameters */
            $this->settings[$sectionID] = $args;
            return $sectionID;
        }


        /**
         * Sanitize section parameters.
         *
         * @param array $args Array containing section parameters.
         * @return array String returning the sanitized section ID.
         */
        private function sanitize_section_parameters($args)
        {

            if (!is_string($args['title'])) $args['title'] = '';
            if (!is_callable($args['callback'])) $args['callback'] = '';
            if (empty($args['fields'])) $args['fields'] = [];

            return $args;
        }


        /**
         * Set field parameters.
         *
         * @param string $sectionID String containing the section ID.
         * @param string $fieldID String containing the field ID.
         * @param array $args Array containing field parameters.
         * @return boolean Return false if field could not be created.
         */
        private function set_field_parameters($sectionID, $fieldID, $args)
        {

            $field = $this->sanitize_field_parameters($fieldID, $args);

            if ($field) $this->settings[$sectionID]['fields'][$fieldID] = $args;

            return $field;
        }


        /**
         * Sanitize field parameters.
         *
         * @param string $fieldID String containing the field ID.
         * @param array $args Array containing field parameters.
         * @return boolean Return false if field could not be created.
         */
        private function sanitize_field_parameters($fieldID, $args)
        {

            $field = true;

            /* skip if type is not a string */
            if (!is_string($args['type'])) {
                add_settings_error($this->optionGroup,
                    'type-not-a-string',
                    'The given field type for the field with ID "' . esc_html($fieldID) . '" is not a string. Skip field.',
                    'warning');
                $field = false;
            }

            /* skip if title is not a string */
            if (!is_string($args['title'])) {
                add_settings_error($this->optionGroup,
                    'title-not-a-string',
                    'The given title for the field with ID "' . esc_html($fieldID) . '" is not a string. Skip field.',
                    'warning');
                $field = false;
            }

            /* skip if description is not a string */
            if (!is_string($args['description'])) {
                add_settings_error($this->optionGroup,
                    'description-not-a-string',
                    'The given description for the field with ID "' . esc_html($fieldID) . '" is not a string. Skip field.',
                    'warning');
                $field = false;
            }

            /* skip if callback is not a string */
            if (!is_callable($args['callback'])) {
                add_settings_error($this->optionGroup,
                    'callback-not-callable',
                    'The given callback function for the field with ID "' . esc_html($fieldID) . '" is not callable. Skip field.',
                    'warning');
                $field = false;
            }

            /* skip if fields is not an array */
            if (!is_array($args['callback'])) {
                add_settings_error($this->optionGroup,
                    'fields-not-array',
                    'The given fields for the field with ID "' . esc_html($fieldID) . '" is not an array. Skip field.',
                    'warning');
                $field = false;
            }

            return $field;
        }


        /**
         * Display text option field.
         *
         * @param array $args Array containing field parameters.
         */
        private function html_text($args)
        {
            $options = get_option($args['optionGroup']);
            $storedValue = isset($options[$args['id']]) ? $options[$args['id']] : null;
            printf(
                '<input  type="text"' .
                'name="%1$s[%2$s]"' .
                'id="%3$s"' .
                'value="%4$s"' .
                'placeholder=%5$s/>' .
                '%6$s',
                $args['optionGroup'],
                $args['id'],
                $args['id'],
                $storedValue,
                '"' . \OES\Config\Option::TEXT_FIELD_DUMMY . '"',
                $args['description']
            );
        }


        /**
         * Display textarea option field.
         *
         * @param array $args Array containing field parameters.
         */
        private function html_textarea($args)
        {
            $options = get_option($args['optionGroup']);
            $storedValue = isset($options[$args['id']]) ? $options[$args['id']] : null;

            printf(
                '<textarea   class="large-text" ' .
                'name="%1$s[%2$s]" ' .
                'id="%3$s" ' .
                'placeholder=%4$s/> ' .
                '%5$s</textarea>' .
                '%6$s',
                $args['optionGroup'],
                $args['id'],
                $args['id'],
                '"' . \OES\Config\Option::TEXT_FIELD_DUMMY . '"',
                $storedValue,
                $args['description']
            );
        }


        /**
         * Display password option field.
         *
         * @param array $args Array containing field parameters.
         */
        private function html_password($args)
        {
            $options = get_option($args['optionGroup']);
            $storedValue = isset($options[$args['id']]) ? $options[$args['id']] : "password";

            printf(
                '<input size="40" type="password" name="%1$s[%2$s]" id="%3$s" value="%4$s"/> %5$s',
                $args['optionGroup'],
                $args['id'],
                $args['id'],
                $storedValue,
                $args['description']
            );
        }


        /**
         * Display checkbox option field.
         *
         * @param array $args Array containing field parameters.
         */
        private function html_checkbox($args)
        {
            $options = get_option($args['optionGroup']);
            $checked = (isset($options[$args['id']])) ? ' checked="checked" ' : '';

            printf(
                '<input type="checkbox" name="%1$s[%2$s]" id="%3$s" class="regular-text" %4$s> %5$s',
                $args['optionGroup'],
                $args['id'],
                $args['id'],
                $checked,
                $args['description']
            );
        }


        /**
         * Display radio option field.
         *
         * @param array $args Array containing field parameters.
         */
        private function html_radio($args)
        {
            $options = get_option($args['optionGroup']);
            $optionsItems = $args['options'];

            foreach ($optionsItems as $itemKey => $item) {
                $checked = '';
                if (isset($options[$args['id']])) {
                    $checked = ($options[$args['id']] == $itemKey) ? ' checked="checked" ' : '';
                }

                $text = $item;
                if (!empty($args['description'])) $text .= '(' . $args['description'] . ')';

                printf(
                    '<label><input type="radio" name="%1$s[%2$s]" id="%3$s" value="%4$s" %5$s/>%6$s</label><br>',
                    $args['optionGroup'],
                    $args['id'],
                    $args['id'],
                    $itemKey,
                    $checked,
                    $text
                );
            }
        }


        /**
         * Display dropdown option field.
         *
         * @param array $args Array containing field parameters.
         */
        private function html_dropdown($args)
        {
            $options = get_option($args['optionGroup']);
            $optionsItems = $args['options'];

            printf(
                '<select name="%1$s[%2$s]" id="%3$s">',
                $args['optionGroup'],
                $args['id'],
                $args['id']
            );

            foreach ($optionsItems as $itemKey => $item) {

                /* check if option group */
                if (is_array($item)) {
                    $label = isset($item['optgroup']) ? $item['optgroup'] : 'Missing Group Name';

                    echo '<optgroup label="' . $label . '">';
                    foreach ($item['options'] as $subitemKey => $subitem) {
                        $selected = '';
                        if (isset($options[$args['id']])) {
                            $selected = ($options[$args['id']] == $subitemKey) ? ' selected="selected"' : '';
                        }
                        printf(
                            '<option value="%1$s" %2$s/> %3$s </option>',
                            $subitemKey,
                            $selected,
                            $subitem
                        );
                    }
                    echo '</optgroup>';

                } else {
                    $selected = '';
                    if (isset($options[$args['id']])) {
                        $selected = ($options[$args['id']] == $itemKey) ? ' selected="selected"' : '';
                    }
                    printf(
                        '<option value="%1$s" %2$s/> %3$s </option>',
                        $itemKey,
                        $selected,
                        $item
                    );
                }
            }
            echo '</select>';
        }


        /**
         * Display only text as option field.
         *
         * @param array $args Array containing field parameters.
         */
        private function html_display_only_text($args)
        {
            echo $args['description'];
        }
    }

endif;


/**
 * Overwrite do_settings_section by customized settings display.
 *
 * @param string $page A string containing the slug name of the page whose settings are to be displayed.
 * @param string $type Optional string identifying how to display settings.
 * @param array $args Optional array containing parameters for customized settings display.
 */
function oes_do_settings_sections($page, $type = 'plain', $args = [])
{
    switch ($type) {
        case 'plain' :
            oes_do_settings_sections_plain($page, $args);
            break;

        case 'plain-alt' :
            oes_do_settings_sections_plain_alt($page, $args);
            break;

        case 'table' :
            oes_do_settings_sections_table($page, $args);
            break;
    }
}


/**
 * Customized settings display by adding class and id options.
 *
 * @param string $page A string containing the slug name of the page whose settings are to be displayed.
 * @param array $args Optional array containing parameters for customized settings display.
 */
function oes_do_settings_sections_plain($page, $args = null)
{
    /* set table class */
    $tableClass = isset($args['class']) ? $args['class'] : '';
    $tableID = isset($args['id']) ? $args['id'] : '';

    global $wp_settings_sections, $wp_settings_fields;

    if (!isset($wp_settings_sections[$page])) {
        return;
    }

    foreach ((array)$wp_settings_sections[$page] as $section) {
        if ($section['title']) {
            echo "<h2>{$section['title']}</h2>\n";
        }

        if ($section['callback']) {
            call_user_func($section['callback'], $section);
        }

        if (!isset($wp_settings_fields) || !isset($wp_settings_fields[$page]) || !isset($wp_settings_fields[$page][$section['id']])) {
            continue;
        }
        echo '<table id="' . $tableID . '" class="' . $tableClass . '" role="presentation">';
        do_settings_fields($page, $section['id']);
        echo '</table>';
    }
}


/**
 * TODO @2.0 Roadmap: Customized settings display by adding class and id options.
 *
 * @param string $page A string containing the slug name of the page whose settings are to be displayed.
 * @param array $args Optional array containing parameters for customized settings display.
 */
function oes_do_settings_sections_plain_alt($page, $args = null)
{
    /* set table class */
    $tableClass = isset($args['class']) ? $args['class'] : '';
    $tableID = isset($args['id']) ? $args['id'] : '';

    /* get global settings */
    global $wp_settings_sections, $wp_settings_fields;

    /* skip if settings do not exist */
    if (!isset($wp_settings_sections[$page])) return;

    /* loop through settings */

    /* open table */
    printf('<table%1s%2s role="presentation">',
        $tableID ? ' id="' . $tableID . '"' : '',
        $tableClass ? ' class="' . $tableClass . '"' : ''
    );

    /* prepare header */
    printf('<thead><tr><th id="column-header">%1s</th><th id="column-header">%2s</th></tr></thead><tbody>',
        $args['header-left'] ? $args['header-left'] : 'Option Label',
        $args['header-right'] ? $args['header-right'] : 'Option'
    );


    foreach ((array)$wp_settings_sections[$page] as $section) {

        if ($section['title']) echo '<tr><td colspan="2" class="merged-cells"><strong>' . $section['title'] . '</strong></td></tr>';

        if ($section['callback']) call_user_func($section['callback'], $section);

        if (!isset($wp_settings_fields) ||
            !isset($wp_settings_fields[$page])
            || !isset($wp_settings_fields[$page][$section['id']])) {
            continue;
        }

        foreach ($wp_settings_fields[$page][$section['id']] as $field) {

            printf('<tr%1s><th scope="row">%2s</th><td>',
                empty($field['args']['class']) ? '' : ' class="' . esc_attr($field['args']['class']) . '"',
                empty($field['args']['label_for']) ?
                    $field['title'] :
                    '<label for="' . esc_attr($field['args']['label_for']) . '">' . $field['title'] . '</label>'
            );

            call_user_func($field['callback'], $field['args']);

            echo '</td></tr>';
        }

    }

    echo '</tbody></table>';
}


/**
 * Customized settings display in table format.
 *
 * table display
 *
 *            |   title1   |    title2  |   title3
 * --------------------------------------------------
 * section1   |   field1   |    field2  |   field3
 * section2   |   field1   |    field2  |   field3
 *
 * @param string $page A string containing the slug name of the page whose settings are to be displayed.
 * @param array $args Optional array containing parameters for customized settings display.
 */
function oes_do_settings_sections_table($page, $args)
{
    global $wp_settings_sections, $wp_settings_fields;

    if (!isset($wp_settings_sections[$page])) {
        return;
    }

    oes_include('/includes/option/table.class.php', OES_PATH_TEMP);

    /* create new table */
    $table = new Table();

    /* get settings that are to be displayed */
    if ($wp_settings_sections[$page]) {

        /* loop through sections */
        foreach ((array)$wp_settings_sections[$page] as $section) {

            /* validate section field */
            if (!isset($wp_settings_fields) ||
                !isset($wp_settings_fields[$page]) ||
                !isset($wp_settings_fields[$page][$section['id']])) {
                continue;
            }

            /* prepare row */
            $tableFields = [];

            /* add description as first column entry */
            if ($section['callback']) {
                $tableFields['Description'] = ['callback' => $section['callback'], 'args' => $section];
            }

            /* prepare field */
            foreach ((array)$wp_settings_fields[$page][$section['id']] as $field) {
                $tableFields[$field['title']] = ['callback' => $field['callback'], 'args' => $field['args']];
            }

            /* add rows and fields */
            $table->add_fields_array($section['title'], $tableFields);
        }
    }

    /* set table parameters */
    $tableClass = isset($args['class']) ? $args['class'] : 'oes_settings_table';
    $tableID = isset($args['id']) ? $args['id'] : 'default';
    $caption = isset($args['caption']) ? $args['caption'] : null;

    /* render table */
    $table->html($tableClass, $tableID, $caption);
}